/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as LoginIndexImport } from './routes/login.index'
import { Route as LoginNewUserImport } from './routes/login.new-user'
import { Route as DashboardInboxImport } from './routes/dashboard.inbox'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  path: '/',
  getParentRoute: () => LoginRoute,
} as any)

const LoginNewUserRoute = LoginNewUserImport.update({
  path: '/new-user',
  getParentRoute: () => LoginRoute,
} as any)

const DashboardInboxRoute = DashboardInboxImport.update({
  path: '/inbox',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/inbox': {
      id: '/dashboard/inbox'
      path: '/inbox'
      fullPath: '/dashboard/inbox'
      preLoaderRoute: typeof DashboardInboxImport
      parentRoute: typeof DashboardImport
    }
    '/login/new-user': {
      id: '/login/new-user'
      path: '/new-user'
      fullPath: '/login/new-user'
      preLoaderRoute: typeof LoginNewUserImport
      parentRoute: typeof LoginImport
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof LoginImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardInboxRoute: typeof DashboardInboxRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardInboxRoute: DashboardInboxRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface LoginRouteChildren {
  LoginNewUserRoute: typeof LoginNewUserRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginNewUserRoute: LoginNewUserRoute,
  LoginIndexRoute: LoginIndexRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/login/new-user': typeof LoginNewUserRoute
  '/login/': typeof LoginIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/login/new-user': typeof LoginNewUserRoute
  '/login': typeof LoginIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/dashboard/inbox': typeof DashboardInboxRoute
  '/login/new-user': typeof LoginNewUserRoute
  '/login/': typeof LoginIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/inbox'
    | '/login/new-user'
    | '/login/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/dashboard/inbox' | '/login/new-user' | '/login'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/inbox'
    | '/login/new-user'
    | '/login/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/inbox"
      ]
    },
    "/login": {
      "filePath": "login.tsx",
      "children": [
        "/login/new-user",
        "/login/"
      ]
    },
    "/dashboard/inbox": {
      "filePath": "dashboard.inbox.tsx",
      "parent": "/dashboard"
    },
    "/login/new-user": {
      "filePath": "login.new-user.tsx",
      "parent": "/login"
    },
    "/login/": {
      "filePath": "login.index.tsx",
      "parent": "/login"
    }
  }
}
ROUTE_MANIFEST_END */
